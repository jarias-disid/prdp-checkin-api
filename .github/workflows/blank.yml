# This is a basic workflow to help you get started with Actions

name: CICD for Cloudhub 2.0

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out (download) your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      
      # Guarda en cache las dependencias de Maven
      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys:
            ${{ runner.os }}-maven-
      # La versión de Java a utilizar
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '17'
          cache: 'maven'

      # Creación del settings de maven para este repositorio          
      - uses: s4u/maven-settings-action@v2.6.0
        with:
          servers: |
            [{
              "id": "anypoint-exchange-v3",
              "username": "${{ secrets.ANYPOINT_USERNAME }}",
              "password": "${{ secrets.ANYPOINT_PASSWORD }}"
            },
            {
              "id": "cloudhub-deploy",
              "username": "${{ secrets.ANYPOINT_USERNAME }}",
              "password": "${{ secrets.ANYPOINT_PASSWORD }}"
            },
            {
              "id": "releases-ee",
              "username": "${{ secrets.ANYPOINT_USERNAME }}",
              "password": "${{ secrets.ANYPOINT_PASSWORD }}"
            }]
            
      # Compila el proyecto, que genera un jar
      - name: Build
        run: mvn -B package --file check-in-papi-app/pom.xml

      - name: Stamp artifact file name with commit hash
        run: |
          artifactName1=$(ls check-in-papi-app/target/*.jar | head -1)
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          artifactName2=$(ls check-in-papi-app/target/*.jar | head -1 | sed "s/.jar/.$commitHash.jar/g")
          mv $artifactName1 $artifactName2

      # Save the produced jar file to be deployed later
      - uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: check-in-papi-app/target/*.jar
